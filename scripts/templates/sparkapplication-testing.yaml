apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: example-workload-low-cpu-${UUID}
  namespace: default
spec:
  sparkConf:
    "spark.hadoop.fs.s3a.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "spark.hadoop.fs.s3a.aws.credentials.provider": "com.amazonaws.auth.InstanceProfileCredentialsProvider"
    "spark.kubernetes.local.dirs.tmpfs": "true"
    "spark.io.encryption.enabled": "true"
    "spark.eventLog.enabled": "true"
    "spark.eventLog.dir": "s3a://${AWS_S3_BUCKET_SPARK_UI}/spark-ui"
    "‚Äçspark.dynamicAllocation.enabled": "true"
    "spark.dynamicAllocation.shuffleTracking.enabled": "true"
    "spark.dynamicAllocation.shuffleTracking.timeout": "120"
    "spark.dynamicAllocation.minExecutors": "1"
    "spark.dynamicAllocation.maxExecutors": "2"
    "spark.kubernetes.allocation.batch.size": "15"
    "spark.dynamicAllocation.executorAllocationRatio": "1"
    "spark.dynamicAllocation.schedulerBacklogTimeout": "1"
  type: Python
  pythonVersion: "3"
  mode: cluster
  image: "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com/spark-custom:3.2.0"
  imagePullPolicy: IfNotPresent
  mainApplicationFile: "s3a://${AWS_S3_BUCKET_SPARK_UI}/data/src/jobs/example-001-csv2parquet.py"
  arguments: [
    "s3a://${AWS_S3_BUCKET_SPARK_UI}/data/files/dataset-example.csv",
    "s3a://${AWS_S3_BUCKET_SPARK_UI}/output/dataset-example/"
  ]
  sparkVersion: "3.2.0"
  restartPolicy:
    type: Never
  volumes:
    - name: "spark-volume-testing-${UUID}"
      hostPath:
        path: "/tmp"
        type: Directory
  timeToLiveSeconds: 5
  driver:
    cores: 1
    memory: "512m"
    labels:
      version: 3.2.0
    serviceAccount: spark
    volumeMounts:
      - name: "spark-volume-testing-${UUID}"
        mountPath: "/tmp"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: workload
              operator: In
              values:
              - "${TYPE_WORKLOAD}-driver"
  executor:
    cores: 1
    instances: 2
    coreRequest: "500m"
    memory: "1000m"
    labels:
      version: 3.2.0
    volumeMounts:
      - name: "spark-volume-testing-${UUID}"
        mountPath: "/tmp"
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: workload
              operator: In
              values:
              - "${TYPE_WORKLOAD}"
